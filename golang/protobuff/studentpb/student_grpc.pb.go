// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/student.proto

package studentpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudenServiceClient is the client API for StudenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudenServiceClient interface {
	GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*Student, error)
	SetStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*SetStudentResponse, error)
}

type studenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudenServiceClient(cc grpc.ClientConnInterface) StudenServiceClient {
	return &studenServiceClient{cc}
}

func (c *studenServiceClient) GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/student.StudenService/GetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studenServiceClient) SetStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*SetStudentResponse, error) {
	out := new(SetStudentResponse)
	err := c.cc.Invoke(ctx, "/student.StudenService/SetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudenServiceServer is the server API for StudenService service.
// All implementations must embed UnimplementedStudenServiceServer
// for forward compatibility
type StudenServiceServer interface {
	GetStudent(context.Context, *GetStudentRequest) (*Student, error)
	SetStudent(context.Context, *Student) (*SetStudentResponse, error)
	mustEmbedUnimplementedStudenServiceServer()
}

// UnimplementedStudenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudenServiceServer struct {
}

func (UnimplementedStudenServiceServer) GetStudent(context.Context, *GetStudentRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (UnimplementedStudenServiceServer) SetStudent(context.Context, *Student) (*SetStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStudent not implemented")
}
func (UnimplementedStudenServiceServer) mustEmbedUnimplementedStudenServiceServer() {}

// UnsafeStudenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudenServiceServer will
// result in compilation errors.
type UnsafeStudenServiceServer interface {
	mustEmbedUnimplementedStudenServiceServer()
}

func RegisterStudenServiceServer(s grpc.ServiceRegistrar, srv StudenServiceServer) {
	s.RegisterService(&StudenService_ServiceDesc, srv)
}

func _StudenService_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudenServiceServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.StudenService/GetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudenServiceServer).GetStudent(ctx, req.(*GetStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudenService_SetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudenServiceServer).SetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.StudenService/SetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudenServiceServer).SetStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

// StudenService_ServiceDesc is the grpc.ServiceDesc for StudenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "student.StudenService",
	HandlerType: (*StudenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudent",
			Handler:    _StudenService_GetStudent_Handler,
		},
		{
			MethodName: "SetStudent",
			Handler:    _StudenService_SetStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/student.proto",
}
